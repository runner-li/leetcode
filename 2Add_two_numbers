// overflow

//Definition for singly-linked list.
//struct ListNode {
//   int val;
//    ListNode *next;
//    ListNode(int x) : val(x), next(NULL) {}
// };

class Solution 
{
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        ListNode *res = new ListNode(-1);
        ListNode *cur = res;
        
        long temp1 = 0, temp2 = 0, carry = 0, sum;
        
        long base = 1;
        while (l1)
        {
            temp1 = temp1 + l1->val * base;
            base = base *10;
            l1=l1->next;
        }
        
        base = 1;
        while (l2)
        {
            temp2 = temp2 + l2->val * base;
            base = base *10;
            l2=l2->next;
        }
        
        sum = temp1 + temp2;
        res->val = sum%10;
        
        while (sum/10)
        {
            sum = sum/10;
            cur->next = new ListNode(sum%10);
            cur = cur->next;
        }
        return res;  
    }
};


class Solution 
{
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        ListNode *res = new ListNode(-1);
        ListNode *cur = res;
        
        int temp1 = 0, temp2 = 0, carry = 0, sum;
        
        while (l1||l2)
        {
            temp1 = l1 ? l1->val : 0;
            temp2 = l2 ? l2->val : 0;
            sum = temp1 + temp2;
            cur->val= (sum + carry)%10;
            carry = (sum + carry)/10;
            
            if (l1) l1 = l1->next;
            if (l2) l2 = l2->next;
            if ( l1 || l2 || carry)
            {
                cur->next = new ListNode(carry);
                cur = cur->next;
            }
            
        }
        return res;  
    }
};
